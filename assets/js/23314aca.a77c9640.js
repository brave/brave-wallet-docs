"use strict";(self.webpackChunkbrave_wallet_docs=self.webpackChunkbrave_wallet_docs||[]).push([[595],{5843:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>r,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"default-wallet","title":"Default Wallet setting","description":"We expose a setting in brave://settings/wallet to control how Brave makes the provider objects available (window.ethereum and window.braveSolana and its alias window.solana)","source":"@site/docs/default-wallet.md","sourceDirName":".","slug":"/default-wallet","permalink":"/default-wallet","draft":false,"unlisted":false,"editUrl":"https://github.com/brave/brave-wallet-docs/edit/main/docs/default-wallet.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5},"sidebar":"tutorialSidebar","previous":{"title":"Restrictions for providers","permalink":"/provider-availability"},"next":{"title":"Overview","permalink":"/ethereum"}}');var a=n(4848),i=n(8453);const l={sidebar_position:5},o="Default Wallet setting",r={},d=[];function c(e){const t={code:"code",h1:"h1",header:"header",li:"li",p:"p",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"default-wallet-setting",children:"Default Wallet setting"})}),"\n",(0,a.jsxs)(t.p,{children:["We expose a setting in ",(0,a.jsx)(t.code,{children:"brave://settings/wallet"})," to control how Brave makes the provider objects available (",(0,a.jsx)(t.code,{children:"window.ethereum"})," and ",(0,a.jsx)(t.code,{children:"window.braveSolana"})," and its alias ",(0,a.jsx)(t.code,{children:"window.solana"}),")"]}),"\n",(0,a.jsx)(t.p,{children:"Since extensions sometimes also provide these objects, this setting will help decide which wallet handles these objects."}),"\n",(0,a.jsx)(t.p,{children:"Here's a description of each setting:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"Extensions (Brave Wallet fallback)"})," - This is the default. Brave Wallet will expose ",(0,a.jsx)(t.code,{children:"window.ethereum"})," and ",(0,a.jsx)(t.code,{children:"window.braveSolana"})," but allow other extensions such as MetaMask to overwrite it."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"Brave Wallet"})," - Exposes ",(0,a.jsx)(t.code,{children:"window.ethereum"})," and ",(0,a.jsx)(t.code,{children:"window.braveSolana"})," and prevents sites and extensions from changing them."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"Extensions (no fallback)"})," - ",(0,a.jsx)(t.code,{children:"window.ethereum"})," and ",(0,a.jsx)(t.code,{children:"window.braveSolana"})," will not be provided by Brave Wallet at all. If you have enabled an extension such as MetaMask, it is free to use the provider object."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"Crypto Wallets (Deprecated)"})," - Gives access to the old deprecated wallet. This option is not compatible with other extensions such as MetaMask."]}),"\n"]}),"\n",(0,a.jsx)(t.p,{children:"After changing the default wallet, it is best to restart your browser. Why?"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:["If you had Brave Wallet loaded, it won't be unloaded until the next restart. When Brave Wallet is loaded it will not work properly with other extensions trying to access ",(0,a.jsx)(t.code,{children:"window.ethereum"}),"."]}),"\n",(0,a.jsx)(t.li,{children:"Existing tabs (ones already opened) will not change to use the new wallet setting, you need a new tab or a browser restart."}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>l,x:()=>o});var s=n(6540);const a={},i=s.createContext(a);function l(e){const t=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:l(e.components),s.createElement(i.Provider,{value:t},e.children)}}}]);