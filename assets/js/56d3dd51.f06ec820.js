"use strict";(self.webpackChunkbrave_wallet_docs=self.webpackChunkbrave_wallet_docs||[]).push([[35],{6:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>s,default:()=>h,frontMatter:()=>t,metadata:()=>c,toc:()=>a});const c=JSON.parse('{"id":"ethereum/provider-api/events","title":"Events","description":"connect","source":"@site/docs/ethereum/provider-api/events.md","sourceDirName":"ethereum/provider-api","slug":"/ethereum/provider-api/events","permalink":"/ethereum/provider-api/events","draft":false,"unlisted":false,"editUrl":"https://github.com/brave/brave-wallet-docs/edit/main/docs/ethereum/provider-api/events.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Methods","permalink":"/ethereum/provider-api/methods"},"next":{"title":"Properties","permalink":"/ethereum/provider-api/properties"}}');var i=r(4848),d=r(8453);const t={sidebar_position:3},s="Events",o={},a=[{value:"<code>connect</code>",id:"connect",level:2},{value:"<code>disconnect</code>",id:"disconnect",level:2},{value:"<code>chainChanged</code>",id:"chainchanged",level:2},{value:"<code>accountsChanged</code>",id:"accountschanged",level:2},{value:"<code>message</code>",id:"message",level:2},{value:"<code>close</code> (deprecated)",id:"close-deprecated",level:2},{value:"<code>networkChanged</code> (deprecated)",id:"networkchanged-deprecated",level:2}];function l(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,d.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"events",children:"Events"})}),"\n",(0,i.jsx)(n.h2,{id:"connect",children:(0,i.jsx)(n.code,{children:"connect"})}),"\n",(0,i.jsx)(n.p,{children:"The Provider emits connect when it:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"first connects to a chain after being initialized."}),"\n",(0,i.jsx)(n.li,{children:"first connects to a chain, after the disconnect event was emitted."}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"interface ProviderConnectInfo {\n  readonly chainId: string;\n}\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"Provider.on('connect', listener: (connectInfo: ProviderConnectInfo) => void): Provider;\n"})}),"\n",(0,i.jsx)(n.h2,{id:"disconnect",children:(0,i.jsx)(n.code,{children:"disconnect"})}),"\n",(0,i.jsx)(n.p,{children:"The Provider emits disconnect when it becomes disconnected from all chains."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"Provider.on('disconnect', listener: (error: ProviderRpcError) => void): Provider;\n"})}),"\n",(0,i.jsx)(n.h2,{id:"chainchanged",children:(0,i.jsx)(n.code,{children:"chainChanged"})}),"\n",(0,i.jsx)(n.p,{children:"The Provider emits chainChanged when connecting to a new chain."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"Provider.on('chainChanged', listener: (chainId: string) => void): Provider;\n"})}),"\n",(0,i.jsx)(n.h2,{id:"accountschanged",children:(0,i.jsx)(n.code,{children:"accountsChanged"})}),"\n",(0,i.jsx)(n.p,{children:"The Provider emits accountsChanged if the accounts returned from the Provider (eth_accounts) change."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"Provider.on('accountsChanged', listener: (accounts: string[]) => void): Provider;\n"})}),"\n",(0,i.jsx)(n.h2,{id:"message",children:(0,i.jsx)(n.code,{children:"message"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"message"})," event is fired for ",(0,i.jsx)(n.code,{children:"eth_subscribe"})," subscription results."]}),"\n",(0,i.jsxs)(n.p,{children:["Other types of events are possible in the future, so be sure to check the ",(0,i.jsx)(n.code,{children:"type"})," property."]}),"\n",(0,i.jsx)(n.p,{children:"The event will be emitted with an object argument of the following form:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"interface ProviderMessage {\n  readonly type: string;\n  readonly data: unknown;\n}\n"})}),"\n",(0,i.jsxs)(n.h2,{id:"close-deprecated",children:[(0,i.jsx)(n.code,{children:"close"})," (deprecated)"]}),"\n",(0,i.jsxs)(n.p,{children:["Not yet implemented, but Brave may implement it.\nThis event ",(0,i.jsx)(n.code,{children:"close"})," is superseded by ",(0,i.jsx)(n.code,{children:"disconnect"}),"."]}),"\n",(0,i.jsx)(n.admonition,{title:"Deprecated API",type:"danger",children:(0,i.jsx)(n.p,{children:"This API is deprecated and not available in Brave Wallet."})}),"\n",(0,i.jsxs)(n.h2,{id:"networkchanged-deprecated",children:[(0,i.jsx)(n.code,{children:"networkChanged"})," (deprecated)"]}),"\n",(0,i.jsx)(n.p,{children:"Not yet implemented, but Brave may implement it for webcompat reasons."}),"\n",(0,i.jsxs)(n.p,{children:["The event ",(0,i.jsx)(n.code,{children:"networkChanged"})," is superseded by ",(0,i.jsx)(n.code,{children:"chainChanged"}),"."]}),"\n",(0,i.jsx)(n.admonition,{title:"Deprecated API",type:"danger",children:(0,i.jsx)(n.p,{children:"This API is deprecated and not available in Brave Wallet."})})]})}function h(e={}){const{wrapper:n}={...(0,d.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>t,x:()=>s});var c=r(6540);const i={},d=c.createContext(i);function t(e){const n=c.useContext(d);return c.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),c.createElement(d.Provider,{value:n},e.children)}}}]);