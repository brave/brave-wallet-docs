"use strict";(self.webpackChunkbrave_wallet_docs=self.webpackChunkbrave_wallet_docs||[]).push([[436],{1599:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"solana/provider-api/methods","title":"Methods","description":"Compatibility","source":"@site/docs/solana/provider-api/methods.md","sourceDirName":"solana/provider-api","slug":"/solana/provider-api/methods","permalink":"/solana/provider-api/methods","draft":false,"unlisted":false,"editUrl":"https://github.com/brave/brave-wallet-docs/edit/main/docs/solana/provider-api/methods.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Brave Wallet detection","permalink":"/solana/provider-api/provider-detection"},"next":{"title":"Properties","permalink":"/solana/provider-api/properties"}}');var i=s(4848),t=s(8453);const o={sidebar_position:2},r="Methods",c={},l=[{value:"Compatibility",id:"compatibility",level:2},{value:"<code>braveSolana.connect</code>",id:"bravesolanaconnect",level:2},{value:"Eagerly connect",id:"eagerly-connect",level:3},{value:"<code>braveSolana.disconnect</code>",id:"bravesolanadisconnect",level:2},{value:"<code>braveSolana.signAndSendTransaction</code>",id:"bravesolanasignandsendtransaction",level:2},{value:"<code>braveSolana.signTransaction</code> (deprecated)",id:"bravesolanasigntransaction-deprecated",level:2},{value:"<code>braveSolana.signAllTransactions</code> (deprecated)",id:"bravesolanasignalltransactions-deprecated",level:2},{value:"<code>braveSolana.signMessage</code>",id:"bravesolanasignmessage",level:2},{value:"<code>braveSolana.request</code>",id:"bravesolanarequest",level:2},{value:"<code>connect</code>",id:"connect",level:3},{value:"<code>disconnect</code>",id:"disconnect",level:3},{value:"<code>signAndSendTransaction</code>",id:"signandsendtransaction",level:3},{value:"<code>signTransaction</code> (deprecated)",id:"signtransaction-deprecated",level:3},{value:"<code>signAllTransactions</code> (deprecated)",id:"signalltransactions-deprecated",level:3},{value:"<code>signMessage</code>",id:"signmessage",level:3}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"methods",children:"Methods"})}),"\n",(0,i.jsx)(n.h2,{id:"compatibility",children:"Compatibility"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"window.solana"})," is an alias of ",(0,i.jsx)(n.code,{children:"window.braveSolana"})," which should be used mainly."]}),"\n",(0,i.jsx)(n.h2,{id:"bravesolanaconnect",children:(0,i.jsx)(n.code,{children:"braveSolana.connect"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"braveSolana.connect"})," is required before calling other methods. First time calling\nconnect will prompt users to grant permission for current selected account and\nthe permission will be stored in ",(0,i.jsx)(n.code,{children:"brave://settings/content/solana"}),". Subsequent\ncalls won't ask for permission again if granted permission is still in\ncontent settings. Note that having granted permission doesn't mean a dApp\nis connected, a website still need to call ",(0,i.jsx)(n.code,{children:"braveSolana.connect"})," when disconnected."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"interface ConnectOptions {\n  // Eagerly connect\n  onlyIfTrusted?: boolean\n}\nbraveSolana.connect(options?: ConnectOptions) : Promise<{ publicKey: solanaWeb3.PublicKey }>\n"})}),"\n",(0,i.jsxs)(n.p,{children:["When a connect succeeds,\n",(0,i.jsx)(n.a,{href:"https://solana-labs.github.io/solana-web3.js/v1.x/classes/PublicKey.html",children:"solanaWeb3.PublicKey"}),"\nobject will be returned, otherwise the promise will be rejected with error."]}),"\n",(0,i.jsx)(n.p,{children:"Example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const result = await window.braveSolana.connect();\n// BrG44HdsEhzapvs8bEqzvkq4egwevS3fRE6ze2ENo6S8\nconsole.log(result.publicKey.ToString());\n"})}),"\n",(0,i.jsx)(n.h3,{id:"eagerly-connect",children:"Eagerly connect"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"// eagerly connect\nbraveSolana.connect({ onlyIfTrusted: true }) : Promise<{ publicKey: solanaWeb3.PublicKey }>\n"})}),"\n",(0,i.jsxs)(n.p,{children:["When an optional ",(0,i.jsx)(n.code,{children:"{ onlyIfTrusted: true }"})," is provided, that means a website\nwants to eagerly connect, which means connect request will be rejected\nautomatically when it doesn't have previously granted permission or the wallet\nis locked."]}),"\n",(0,i.jsx)(n.h2,{id:"bravesolanadisconnect",children:(0,i.jsx)(n.code,{children:"braveSolana.disconnect"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"braveSolana.disconnect"})," will set state of the site to be disconnected for the\nselected account. Note that it won't remove the granted permission in content\nsettings."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"braveSolana.disconnect() : Promise<undefined>\n"})}),"\n",(0,i.jsx)(n.h2,{id:"bravesolanasignandsendtransaction",children:(0,i.jsx)(n.code,{children:"braveSolana.signAndSendTransaction"})}),"\n",(0,i.jsxs)(n.p,{children:["This API will sign the transaction with private key of the selected account and\nsubmit it using Solana JSON RPC. It takes a\n",(0,i.jsx)(n.a,{href:"https://solana-labs.github.io/solana-web3.js/v1.x/classes/Transaction.html",children:"solanaWeb3.Transaction"}),"\nand an optional ",(0,i.jsx)(n.a,{href:"https://solana-labs.github.io/solana-web3.js/v1.x/modules.html#SendOptions",children:"solanaWeb3.SendOptions"})," parameter\n, and return a promise containing a public key and a signature."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"interface SendOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean,\n  /** preflight commitment level */\n  preflightCommitment?: string, // 'processed' | 'confirmed' | 'finalized'\n  /** Maximum number of times for the RPC node to retry sending the\n    transaction to the leader. */\n  maxRetries?: number;\n}\nbraveSolana.signAndSendTransaction(solanaWeb3.Transaction, options?: SendOptions)\n : Promise<{publicKey: <base58 encoded string>,\n            signature: <base58 encoded string>}>\n"})}),"\n",(0,i.jsx)(n.p,{children:"Example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const NETWORK = clusterApiUrl(\"testnet\");\nconst connection = new Connection(NETWORK);\nconst transaction = new Transaction();\ntry {\n  const result = await window.braveSolana.signAndSendTransaction(transaction,\n      {maxRetries: 5, preflightCommitment: 'finalized', skipPreflight: false} // optional\n      );\n  // BrG44HdsEhzapvs8bEqzvkq4egwevS3fRE6ze2ENo6S8\n  console.log(result.publicKey);\n  await connection.confirmTransaction(result.signature);\n} catch (err) {\n  // { code: 4001, message: 'User rejected the request.' }\n}\n"})}),"\n",(0,i.jsxs)(n.h2,{id:"bravesolanasigntransaction-deprecated",children:[(0,i.jsx)(n.code,{children:"braveSolana.signTransaction"})," (deprecated)"]}),"\n",(0,i.jsxs)(n.p,{children:["This API allows a website to sign a transaction and submit it later.\nIt takes a\n",(0,i.jsx)(n.a,{href:"https://solana-labs.github.io/solana-web3.js/v1.x/classes/Transaction.html",children:"solanaWeb3.Transaction"}),"\nand return a promise containing a\n",(0,i.jsx)(n.a,{href:"https://solana-labs.github.io/solana-web3.js/v1.x/classes/Transaction.html",children:"solanaWeb3.Transaction"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"braveSolana.signTransaction(solanaWeb3.Transaction) : Promise<solanaWeb3.Transaction>\n"})}),"\n",(0,i.jsx)(n.p,{children:"Example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const NETWORK = clusterApiUrl(\"testnet\");\nconst connection = new Connection(NETWORK);\nconst transaction = new Transaction();\ntry {\n  const signedTransaction = await window.braveSolana.signTransaction(transaction);\n  const signature = await connection.sendRawTransaction(signedTransaction.serialize());\n} catch (err) {\n  // { code: 4001, message: 'User rejected the request.' }\n}\n"})}),"\n",(0,i.jsx)(n.admonition,{title:"Deprecated API",type:"danger",children:(0,i.jsx)(n.p,{children:"This API is deprecated but is available in Brave Wallet."})}),"\n",(0,i.jsxs)(n.h2,{id:"bravesolanasignalltransactions-deprecated",children:[(0,i.jsx)(n.code,{children:"braveSolana.signAllTransactions"})," (deprecated)"]}),"\n",(0,i.jsxs)(n.p,{children:["This API allows a website to sign some transactions and submit them later.\nIt takes an array of\n",(0,i.jsx)(n.a,{href:"https://solana-labs.github.io/solana-web3.js/v1.x/classes/Transaction.html",children:"solanaWeb3.Transaction"}),"\nand return a promise containing an array of\n",(0,i.jsx)(n.a,{href:"https://solana-labs.github.io/solana-web3.js/v1.x/classes/Transaction.html",children:"solanaWeb3.Transaction"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"braveSolana.signTransaction(solanaWeb3.Transaction[]) : Promise<solanaWeb3.Transaction[]>\n"})}),"\n",(0,i.jsx)(n.p,{children:"Example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const NETWORK = clusterApiUrl(\"testnet\");\nconst connection = new Connection(NETWORK);\nconst transaction1 = new Transaction();\nconst transaction2 = new Transaction();\ntry {\n  const signedTransactions = await window.braveSolana.signTransaction([transaction1, transaction2]);\n  signedTransactions.forEach(signedTransaction => {\n    const signature = await connection.sendRawTransaction(signedTransaction.serialize())});\n} catch (err) {\n  // { code: 4001, message: 'User rejected the request.' }\n}\n"})}),"\n",(0,i.jsx)(n.admonition,{title:"Deprecated API",type:"danger",children:(0,i.jsx)(n.p,{children:"This API is deprecated but is available in Brave Wallet."})}),"\n",(0,i.jsx)(n.h2,{id:"bravesolanasignmessage",children:(0,i.jsx)(n.code,{children:"braveSolana.signMessage"})}),"\n",(0,i.jsxs)(n.p,{children:["Allows a website to sign a message using the selected account. If we detect the\nmessage payload to be signed is a transaction, we will reject the request\nautomatically.\nThis API takes ",(0,i.jsx)(n.strong,{children:"Uint8Array"})," with an optional encoding (",(0,i.jsx)(n.strong,{children:"hex"})," or ",(0,i.jsx)(n.strong,{children:"utf8"}),") to\ndisplay the message to users. If a caller doesn't specify encoding, default\nwould be utf8."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"braveSolana.signMessage(Uint8Array, string?) : Promise({ publicKey: <solanaWeb3.PublicKey>,\n                                                    signature: <Uint8Array> })\n"})}),"\n",(0,i.jsx)(n.p,{children:"Example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'const encodedMessage = new TextEncoder().encode(\'signMessage test\');\n// signedMessage1 === signedMessage2 === signedMessage3\nconst signedMessage1 = await window.braveSolana.signMessage(encodedMessage);\nconst signedMessage2 = await window.braveSolana.signMessage(encodedMessage, "utf8");\nconst signedMessage2 = await window.braveSolana.signMessage(encodedMessage, "hex");\n'})}),"\n",(0,i.jsx)(n.h2,{id:"bravesolanarequest",children:(0,i.jsx)(n.code,{children:"braveSolana.request"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"request"})," API allow a website to call above methods with a universal\ninterface. Note input and output might be different for some methods,\nex. signTransaction."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"braveSolana.request({ method: <string>,\n                 parms: {...}}) : Promise<{...}>\n"})}),"\n",(0,i.jsx)(n.h3,{id:"connect",children:(0,i.jsx)(n.code,{children:"connect"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"params"})," is optional for connect."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'braveSolana.request({ method: "connect" })\n : Promise<{ publicKey: solanaWeb3.PublicKey}>\n// eagerly connect\nbraveSolana.request({ method: "connect", params: { onlyIfTrusted : true }})\n : Promise<{ publicKey: solanaWeb3.PublicKey}>\n'})}),"\n",(0,i.jsx)(n.h3,{id:"disconnect",children:(0,i.jsx)(n.code,{children:"disconnect"})}),"\n",(0,i.jsxs)(n.p,{children:["disconnect does not need ",(0,i.jsx)(n.code,{children:"params"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'braveSolana.request({ method: "disconnect" }) : Promise<{}>\n'})}),"\n",(0,i.jsx)(n.h3,{id:"signandsendtransaction",children:(0,i.jsx)(n.code,{children:"signAndSendTransaction"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"params"})," is required and websites must specify base58 encode of\n",(0,i.jsx)(n.code,{children:"serializeMessage"})," of ",(0,i.jsx)(n.a,{href:"https://solana-labs.github.io/solana-web3.js/v1.x/classes/Transaction.html",children:"solanaWeb3.Transaction"}),".\nOptional ",(0,i.jsx)(n.code,{children:"options"})," of type ",(0,i.jsx)(n.a,{href:"https://solana-labs.github.io/solana-web3.js/v1.x/modules.html#SendOptions",children:"solanaWeb3.SendOptions"})," can be specified in ",(0,i.jsx)(n.code,{children:"param"}),".\n",(0,i.jsx)(n.code,{children:"signature"})," in return promise is base58 encoded signature, it is also the\nconfirmed block hash."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'braveSolana.request({method: "signAndSendTransaction",\n                params: { message: <base58 encoded string> }})\n : Promise<{ publicKey: <base58 encoded string>,\n             signature: <base58 encoded string>}>\n'})}),"\n",(0,i.jsx)(n.p,{children:"Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'const bs58 = require("bs58");\nconst NETWORK = clusterApiUrl("testnet");\nconst connection = new Connection(NETWORK);\nconst transaction = new Transaction();\ntry {\n  const result = await window.braveSolana.request({\n    method: "signAndSendTransaction",\n    params: {\n      message: bs58.encode(transaction.serializeMessage()),\n      options: {maxRetries: 5, preflightCommitment: \'finalized\', skipPreflight: false}  // optional\n    }\n  });\n  // BrG44HdsEhzapvs8bEqzvkq4egwevS3fRE6ze2ENo6S8\n  console.log(result.publicKey);\n  await connection.confirmTransaction(result.signature);\n} catch (err) {\n  // { code: 4001, message: \'User rejected the request.\' }\n}\n'})}),"\n",(0,i.jsxs)(n.h3,{id:"signtransaction-deprecated",children:[(0,i.jsx)(n.code,{children:"signTransaction"})," (deprecated)"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"params"})," is required and websites must specify base58 encode of\n",(0,i.jsx)(n.code,{children:"serializeMessage"})," of ",(0,i.jsx)(n.a,{href:"https://solana-labs.github.io/solana-web3.js/v1.x/classes/Transaction.html",children:"solanaWeb3.Transaction"}),".\n",(0,i.jsx)(n.code,{children:"signature"})," in return promise is base58 encoded signature."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'braveSolana.request({method: "signTransaction",\n                params: { message: <base58 encoded string> }})\n : Promise<{ publicKey: <base58 encoded string>,\n             signature: <base58 encoded string> }>\n'})}),"\n",(0,i.jsx)(n.p,{children:"Example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'const bs58 = require("bs58");\nconst NETWORK = clusterApiUrl("testnet");\nconst connection = new Connection(NETWORK);\nconst transaction = new Transaction();\ntry {\n  const signedTransaction = await window.braveSolana.request({\n    method: "signTransaction"\n    params: { message: bs58.encode(transaction.serializeMessage()) }\n  });\n  console.log(\'signature: \' + signedTransaction.signature);\n} catch (err) {\n  // { code: 4001, message: \'User rejected the request.\' }\n}\n'})}),"\n",(0,i.jsx)(n.admonition,{title:"Deprecated API",type:"danger",children:(0,i.jsx)(n.p,{children:"This API is deprecated but is available in Brave Wallet."})}),"\n",(0,i.jsxs)(n.h3,{id:"signalltransactions-deprecated",children:[(0,i.jsx)(n.code,{children:"signAllTransactions"})," (deprecated)"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"params"})," is required and websites must specify an array of base58 encode of\n",(0,i.jsx)(n.code,{children:"serializeMessage"})," of ",(0,i.jsx)(n.a,{href:"https://solana-labs.github.io/solana-web3.js/v1.x/classes/Transaction.html",children:"solanaWeb3.Transaction"}),".\n",(0,i.jsx)(n.code,{children:"signature"})," in return promise is an array of base58 encoded signatures.\nNote that all of the transacion must be the same signer, otherwise request will\nbe rejected."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'braveSolana.request({method: "signAllTransactions",\n                params: { message: <base58 encoded string>[] }})\n : Promise<{ publicKey: <base58 encoded string>,\n             signature: <base58 encoded string>[] }>\n'})}),"\n",(0,i.jsx)(n.p,{children:"Example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'const bs58 = require("bs58");\nconst NETWORK = clusterApiUrl("testnet");\nconst connection = new Connection(NETWORK);\nconst transaction1 = new Transaction();\nconst transaction2 = new Transaction();\nconst transactions = [transaction1, transaction2];\nconst message = transactions.map((transaction) => {\n    return bs58.encode(transaction.serializeMessage());\n});\ntry {\n  const signedTransactions = await window.braveSolana.request({\n    method: "signAllTransactions"\n    params: { message }\n  })\n  signedTransactions.signature.forEach((signedTransaction) => {\n    console.log(\'signature: \' + signedTransaction);\n  });\n} catch (err) {\n  // { code: 4001, message: \'User rejected the request.\' }\n}\n'})}),"\n",(0,i.jsx)(n.admonition,{title:"Deprecated API",type:"danger",children:(0,i.jsx)(n.p,{children:"This API is deprecated but is available in Brave Wallet."})}),"\n",(0,i.jsx)(n.h3,{id:"signmessage",children:(0,i.jsx)(n.code,{children:"signMessage"})}),"\n",(0,i.jsxs)(n.p,{children:["A website must specify ",(0,i.jsx)(n.strong,{children:"Uint8Array"})," to be signed in ",(0,i.jsx)(n.code,{children:"message"})," of ",(0,i.jsx)(n.code,{children:"params"}),".\n",(0,i.jsx)(n.code,{children:"display"})," is optional for display encoding to users,\nit only accepts ",(0,i.jsx)(n.strong,{children:"hex"})," or ",(0,i.jsx)(n.strong,{children:"utf8"}),"  (default: ",(0,i.jsx)(n.strong,{children:"utf8"}),").\n",(0,i.jsx)(n.code,{children:"signature"})," in returned promise is base58 encoded of signature byte array."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'braveSolana.request({method: "signMessage",\n                params: { message: Uint8Array, params?: <string> }})\n : Promise<{ publicKey: <base58 encoded string>,\n             signature: <base58 encoded string> }>\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:' const encodedMessage = new TextEncoder().encode(\'signMessage test\')\n // signedMessage1 === signedMessage2 === signedMessage3\n const signedMessage1 = await window.braveSolana.request({\n   method: "signMessage",\n   params: {message: encodedMessage}\n  });\n const signedMessage2 = await window.braveSolana.request({\n   method: "signMessage",\n   params: {message: encodedMessage, display: "utf8"}\n  });\n const signedMessage3 = await window.braveSolana.request({\n   method: "signMessage",\n   params: {message: encodedMessage, display: "hex"}\n  });\n'})})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>r});var a=s(6540);const i={},t=a.createContext(i);function o(e){const n=a.useContext(t);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),a.createElement(t.Provider,{value:n},e.children)}}}]);